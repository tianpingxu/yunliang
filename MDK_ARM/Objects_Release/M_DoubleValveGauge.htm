<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects_Release\M_DoubleValveGauge.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects_Release\M_DoubleValveGauge.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 6230001: Last Updated: Tue Apr 29 17:41:31 2025
<BR><P>
<H3>Maximum Stack Usage =        160 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; RFRevData &rArr; RF_Process &rArr; Cmt2300_ClearInterruptFlags &rArr; Cmt2300_ReadReg &rArr; cmt_spi3_read &rArr; GPIO_InitPeripheral
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[8]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8]">PendSV_Handler</a><BR>
 <LI><a href="#[1d]">ADC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1d]">ADC_IRQHandler</a><BR>
 <LI><a href="#[4]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">BusFault_Handler</a><BR>
 <LI><a href="#[2]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2]">HardFault_Handler</a><BR>
 <LI><a href="#[3]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">MemManage_Handler</a><BR>
 <LI><a href="#[5]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">UsageFault_Handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1d]">ADC_IRQHandler</a> from startup_n32l40x.o(.text) referenced from startup_n32l40x.o(RESET)
 <LI><a href="#[4]">BusFault_Handler</a> from bsp_interrupt.o(.text.BusFault_Handler) referenced from startup_n32l40x.o(RESET)
 <LI><a href="#[40]">CAN_RX0_IRQHandler</a> from startup_n32l40x.o(.text) referenced from startup_n32l40x.o(RESET)
 <LI><a href="#[41]">CAN_RX1_IRQHandler</a> from startup_n32l40x.o(.text) referenced from startup_n32l40x.o(RESET)
 <LI><a href="#[42]">CAN_SCE_IRQHandler</a> from startup_n32l40x.o(.text) referenced from startup_n32l40x.o(RESET)
 <LI><a href="#[3f]">CAN_TX_IRQHandler</a> from startup_n32l40x.o(.text) referenced from startup_n32l40x.o(RESET)
 <LI><a href="#[20]">COMP_1_2_IRQHandler</a> from startup_n32l40x.o(.text) referenced from startup_n32l40x.o(RESET)
 <LI><a href="#[15]">DMA_Channel1_IRQHandler</a> from startup_n32l40x.o(.text) referenced from startup_n32l40x.o(RESET)
 <LI><a href="#[16]">DMA_Channel2_IRQHandler</a> from startup_n32l40x.o(.text) referenced from startup_n32l40x.o(RESET)
 <LI><a href="#[17]">DMA_Channel3_IRQHandler</a> from startup_n32l40x.o(.text) referenced from startup_n32l40x.o(RESET)
 <LI><a href="#[18]">DMA_Channel4_IRQHandler</a> from startup_n32l40x.o(.text) referenced from startup_n32l40x.o(RESET)
 <LI><a href="#[19]">DMA_Channel5_IRQHandler</a> from startup_n32l40x.o(.text) referenced from startup_n32l40x.o(RESET)
 <LI><a href="#[1a]">DMA_Channel6_IRQHandler</a> from startup_n32l40x.o(.text) referenced from startup_n32l40x.o(RESET)
 <LI><a href="#[1b]">DMA_Channel7_IRQHandler</a> from startup_n32l40x.o(.text) referenced from startup_n32l40x.o(RESET)
 <LI><a href="#[1c]">DMA_Channel8_IRQHandler</a> from startup_n32l40x.o(.text) referenced from startup_n32l40x.o(RESET)
 <LI><a href="#[7]">DebugMon_Handler</a> from bsp_interrupt.o(.text.DebugMon_Handler) referenced from startup_n32l40x.o(RESET)
 <LI><a href="#[10]">EXTI0_IRQHandler</a> from bsp_interrupt.o(.text.EXTI0_IRQHandler) referenced from startup_n32l40x.o(RESET)
 <LI><a href="#[32]">EXTI15_10_IRQHandler</a> from bsp_interrupt.o(.text.EXTI15_10_IRQHandler) referenced from startup_n32l40x.o(RESET)
 <LI><a href="#[11]">EXTI1_IRQHandler</a> from bsp_interrupt.o(.text.EXTI1_IRQHandler) referenced from startup_n32l40x.o(RESET)
 <LI><a href="#[12]">EXTI2_IRQHandler</a> from bsp_interrupt.o(.text.EXTI2_IRQHandler) referenced from startup_n32l40x.o(RESET)
 <LI><a href="#[13]">EXTI3_IRQHandler</a> from bsp_interrupt.o(.text.EXTI3_IRQHandler) referenced from startup_n32l40x.o(RESET)
 <LI><a href="#[14]">EXTI4_IRQHandler</a> from bsp_interrupt.o(.text.EXTI4_IRQHandler) referenced from startup_n32l40x.o(RESET)
 <LI><a href="#[21]">EXTI9_5_IRQHandler</a> from bsp_interrupt.o(.text.EXTI9_5_IRQHandler) referenced from startup_n32l40x.o(RESET)
 <LI><a href="#[e]">FLASH_IRQHandler</a> from startup_n32l40x.o(.text) referenced from startup_n32l40x.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from bsp_interrupt.o(.text.HardFault_Handler) referenced from startup_n32l40x.o(RESET)
 <LI><a href="#[2a]">I2C1_ER_IRQHandler</a> from startup_n32l40x.o(.text) referenced from startup_n32l40x.o(RESET)
 <LI><a href="#[29]">I2C1_EV_IRQHandler</a> from startup_n32l40x.o(.text) referenced from startup_n32l40x.o(RESET)
 <LI><a href="#[2c]">I2C2_ER_IRQHandler</a> from startup_n32l40x.o(.text) referenced from startup_n32l40x.o(RESET)
 <LI><a href="#[2b]">I2C2_EV_IRQHandler</a> from startup_n32l40x.o(.text) referenced from startup_n32l40x.o(RESET)
 <LI><a href="#[45]">LCD_IRQHandler</a> from startup_n32l40x.o(.text) referenced from startup_n32l40x.o(RESET)
 <LI><a href="#[44]">LPTIM_WKUP_IRQHandler</a> from startup_n32l40x.o(.text) referenced from startup_n32l40x.o(RESET)
 <LI><a href="#[3b]">LPUART_IRQHandler</a> from startup_n32l40x.o(.text) referenced from startup_n32l40x.o(RESET)
 <LI><a href="#[43]">LPUART_WKUP_IRQHandler</a> from startup_n32l40x.o(.text) referenced from startup_n32l40x.o(RESET)
 <LI><a href="#[47]">MMU_IRQHandler</a> from startup_n32l40x.o(.text) referenced from startup_n32l40x.o(RESET)
 <LI><a href="#[3]">MemManage_Handler</a> from bsp_interrupt.o(.text.MemManage_Handler) referenced from startup_n32l40x.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from bsp_interrupt.o(.text.NMI_Handler) referenced from startup_n32l40x.o(RESET)
 <LI><a href="#[b]">PVD_IRQHandler</a> from startup_n32l40x.o(.text) referenced from startup_n32l40x.o(RESET)
 <LI><a href="#[8]">PendSV_Handler</a> from startup_n32l40x.o(.text) referenced from startup_n32l40x.o(RESET)
 <LI><a href="#[49]">RAMC_PERR_IRQHandler</a> from startup_n32l40x.o(.text) referenced from startup_n32l40x.o(RESET)
 <LI><a href="#[f]">RCC_IRQHandler</a> from startup_n32l40x.o(.text) referenced from startup_n32l40x.o(RESET)
 <LI><a href="#[33]">RTCAlarm_IRQHandler</a> from startup_n32l40x.o(.text) referenced from startup_n32l40x.o(RESET)
 <LI><a href="#[d]">RTC_WKUP_IRQHandler</a> from startup_n32l40x.o(.text) referenced from startup_n32l40x.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_n32l40x.o(.text) referenced from startup_n32l40x.o(RESET)
 <LI><a href="#[46]">SAC_IRQHandler</a> from startup_n32l40x.o(.text) referenced from startup_n32l40x.o(RESET)
 <LI><a href="#[2d]">SPI1_IRQHandler</a> from startup_n32l40x.o(.text) referenced from startup_n32l40x.o(RESET)
 <LI><a href="#[2e]">SPI2_IRQHandler</a> from startup_n32l40x.o(.text) referenced from startup_n32l40x.o(RESET)
 <LI><a href="#[6]">SVC_Handler</a> from bsp_interrupt.o(.text.SVC_Handler) referenced from startup_n32l40x.o(RESET)
 <LI><a href="#[9]">SysTick_Handler</a> from bsp_interrupt.o(.text.SysTick_Handler) referenced from startup_n32l40x.o(RESET)
 <LI><a href="#[4d]">SystemInit</a> from system_n32l40x.o(.text.SystemInit) referenced from startup_n32l40x.o(.text)
 <LI><a href="#[c]">TAMPER_IRQHandler</a> from startup_n32l40x.o(.text) referenced from startup_n32l40x.o(RESET)
 <LI><a href="#[22]">TIM1_BRK_IRQHandler</a> from startup_n32l40x.o(.text) referenced from startup_n32l40x.o(RESET)
 <LI><a href="#[25]">TIM1_CC_IRQHandler</a> from startup_n32l40x.o(.text) referenced from startup_n32l40x.o(RESET)
 <LI><a href="#[24]">TIM1_TRG_COM_IRQHandler</a> from startup_n32l40x.o(.text) referenced from startup_n32l40x.o(RESET)
 <LI><a href="#[23]">TIM1_UP_IRQHandler</a> from startup_n32l40x.o(.text) referenced from startup_n32l40x.o(RESET)
 <LI><a href="#[26]">TIM2_IRQHandler</a> from bsp_interrupt.o(.text.TIM2_IRQHandler) referenced from startup_n32l40x.o(RESET)
 <LI><a href="#[27]">TIM3_IRQHandler</a> from motor.o(.text.TIM3_IRQHandler) referenced from startup_n32l40x.o(RESET)
 <LI><a href="#[28]">TIM4_IRQHandler</a> from startup_n32l40x.o(.text) referenced from startup_n32l40x.o(RESET)
 <LI><a href="#[3c]">TIM5_IRQHandler</a> from startup_n32l40x.o(.text) referenced from startup_n32l40x.o(RESET)
 <LI><a href="#[3d]">TIM6_IRQHandler</a> from startup_n32l40x.o(.text) referenced from startup_n32l40x.o(RESET)
 <LI><a href="#[3e]">TIM7_IRQHandler</a> from startup_n32l40x.o(.text) referenced from startup_n32l40x.o(RESET)
 <LI><a href="#[35]">TIM8_BRK_IRQHandler</a> from startup_n32l40x.o(.text) referenced from startup_n32l40x.o(RESET)
 <LI><a href="#[38]">TIM8_CC_IRQHandler</a> from startup_n32l40x.o(.text) referenced from startup_n32l40x.o(RESET)
 <LI><a href="#[37]">TIM8_TRG_COM_IRQHandler</a> from startup_n32l40x.o(.text) referenced from startup_n32l40x.o(RESET)
 <LI><a href="#[36]">TIM8_UP_IRQHandler</a> from startup_n32l40x.o(.text) referenced from startup_n32l40x.o(RESET)
 <LI><a href="#[4a]">TIM9_IRQHandler</a> from startup_n32l40x.o(.text) referenced from startup_n32l40x.o(RESET)
 <LI><a href="#[48]">TSC_IRQHandler</a> from startup_n32l40x.o(.text) referenced from startup_n32l40x.o(RESET)
 <LI><a href="#[39]">UART4_IRQHandler</a> from startup_n32l40x.o(.text) referenced from startup_n32l40x.o(RESET)
 <LI><a href="#[3a]">UART5_IRQHandler</a> from bsp_interrupt.o(.text.UART5_IRQHandler) referenced from startup_n32l40x.o(RESET)
 <LI><a href="#[4b]">UCDR_IRQHandler</a> from startup_n32l40x.o(.text) referenced from startup_n32l40x.o(RESET)
 <LI><a href="#[2f]">USART1_IRQHandler</a> from bsp_interrupt.o(.text.USART1_IRQHandler) referenced from startup_n32l40x.o(RESET)
 <LI><a href="#[30]">USART2_IRQHandler</a> from 485_1.o(.text.USART2_IRQHandler) referenced from startup_n32l40x.o(RESET)
 <LI><a href="#[31]">USART3_IRQHandler</a> from bsp_interrupt.o(.text.USART3_IRQHandler) referenced from startup_n32l40x.o(RESET)
 <LI><a href="#[34]">USBWakeUp_IRQHandler</a> from startup_n32l40x.o(.text) referenced from startup_n32l40x.o(RESET)
 <LI><a href="#[1e]">USB_HP_IRQHandler</a> from startup_n32l40x.o(.text) referenced from startup_n32l40x.o(RESET)
 <LI><a href="#[1f]">USB_LP_IRQHandler</a> from startup_n32l40x.o(.text) referenced from startup_n32l40x.o(RESET)
 <LI><a href="#[5]">UsageFault_Handler</a> from bsp_interrupt.o(.text.UsageFault_Handler) referenced from startup_n32l40x.o(RESET)
 <LI><a href="#[a]">WWDG_IRQHandler</a> from startup_n32l40x.o(.text) referenced from startup_n32l40x.o(RESET)
 <LI><a href="#[4e]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_n32l40x.o(.text)
 <LI><a href="#[50]">_sputc</a> from printf8.o(i._sputc) referenced from printf8.o(i.__0sprintf$8)
 <LI><a href="#[4f]">fputc</a> from bsp_usart.o(.text.fputc) referenced from printf8.o(i.__0printf$8)
 <LI><a href="#[4c]">main</a> from main.o(.text.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[4e]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32l40x.o(.text)
</UL>
<P><STRONG><a name="[f0]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[51]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[59]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[f1]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[f2]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[f3]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[f4]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[f5]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_n32l40x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32l40x.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_n32l40x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_n32l40x.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32l40x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_n32l40x.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>CAN_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32l40x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32l40x.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>CAN_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32l40x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32l40x.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>CAN_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32l40x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32l40x.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>CAN_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32l40x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32l40x.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>COMP_1_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32l40x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32l40x.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>DMA_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32l40x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32l40x.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>DMA_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32l40x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32l40x.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>DMA_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32l40x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32l40x.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>DMA_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32l40x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32l40x.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>DMA_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32l40x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32l40x.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DMA_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32l40x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32l40x.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>DMA_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32l40x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32l40x.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>DMA_Channel8_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32l40x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32l40x.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32l40x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32l40x.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32l40x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32l40x.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32l40x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32l40x.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32l40x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32l40x.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32l40x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32l40x.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>LCD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32l40x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32l40x.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>LPTIM_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32l40x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32l40x.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>LPUART_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32l40x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32l40x.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>LPUART_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32l40x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32l40x.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>MMU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32l40x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32l40x.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32l40x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32l40x.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>RAMC_PERR_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32l40x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32l40x.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32l40x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32l40x.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>RTCAlarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32l40x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32l40x.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>RTC_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32l40x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32l40x.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>SAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32l40x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32l40x.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32l40x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32l40x.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32l40x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32l40x.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>TAMPER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32l40x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32l40x.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>TIM1_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32l40x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32l40x.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32l40x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32l40x.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>TIM1_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32l40x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32l40x.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>TIM1_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32l40x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32l40x.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32l40x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32l40x.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32l40x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32l40x.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>TIM6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32l40x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32l40x.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32l40x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32l40x.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>TIM8_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32l40x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32l40x.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32l40x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32l40x.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>TIM8_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32l40x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32l40x.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>TIM8_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32l40x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32l40x.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>TIM9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32l40x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32l40x.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>TSC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32l40x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32l40x.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32l40x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32l40x.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>UCDR_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32l40x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32l40x.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>USBWakeUp_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32l40x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32l40x.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>USB_HP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32l40x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32l40x.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>USB_LP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32l40x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32l40x.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32l40x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32l40x.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[f6]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[f7]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[53]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[c2]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clean_rebuff
</UL>

<P><STRONG><a name="[f8]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[55]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[56]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[52]"></a>__scatterload</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[f9]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[58]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[fa]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[57]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[fb]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[fc]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dclz77c.o(.text), UNUSED)

<P><STRONG><a name="[fd]"></a>__decompress2</STRONG> (Thumb, 94 bytes, Stack size unknown bytes, __dclz77c.o(.text), UNUSED)

<P><STRONG><a name="[de]"></a>ADC_ClearFlag</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, n32l40x_adc.o(.text.ADC_ClearFlag))
<BR><BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usGetMCUADCVolt
</UL>

<P><STRONG><a name="[5a]"></a>ADC_ConfigClk</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, n32l40x_adc.o(.text.ADC_ConfigClk))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ADC_ConfigClk
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_ConfigAdcHclk
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_ConfigAdcPllClk
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vBSP_ADC_Init
</UL>

<P><STRONG><a name="[dd]"></a>ADC_ConfigRegularChannel</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, n32l40x_adc.o(.text.ADC_ConfigRegularChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ADC_ConfigRegularChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usGetMCUADCVolt
</UL>

<P><STRONG><a name="[e5]"></a>ADC_Enable</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, n32l40x_adc.o(.text.ADC_Enable))
<BR><BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vBSP_ADC_Init
</UL>

<P><STRONG><a name="[e0]"></a>ADC_EnableSoftwareStartConv</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, n32l40x_adc.o(.text.ADC_EnableSoftwareStartConv))
<BR><BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usGetMCUADCVolt
</UL>

<P><STRONG><a name="[e8]"></a>ADC_GetCalibrationStatus</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, n32l40x_adc.o(.text.ADC_GetCalibrationStatus))
<BR><BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vBSP_ADC_Init
</UL>

<P><STRONG><a name="[df]"></a>ADC_GetDat</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, n32l40x_adc.o(.text.ADC_GetDat))
<BR><BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usGetMCUADCVolt
</UL>

<P><STRONG><a name="[e1]"></a>ADC_GetFlagStatus</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, n32l40x_adc.o(.text.ADC_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usGetMCUADCVolt
</UL>

<P><STRONG><a name="[e6]"></a>ADC_GetFlagStatusNew</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, n32l40x_adc.o(.text.ADC_GetFlagStatusNew))
<BR><BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vBSP_ADC_Init
</UL>

<P><STRONG><a name="[e4]"></a>ADC_Init</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, n32l40x_adc.o(.text.ADC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ADC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vBSP_ADC_Init
</UL>

<P><STRONG><a name="[e7]"></a>ADC_StartCalibration</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, n32l40x_adc.o(.text.ADC_StartCalibration))
<BR><BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vBSP_ADC_Init
</UL>

<P><STRONG><a name="[4]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, bsp_interrupt.o(.text.BusFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_n32l40x.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>Cmt2300_ClearFifo</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, cmt2300.o(.text.Cmt2300_ClearFifo))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = Cmt2300_ClearFifo &rArr; Cmt2300_ReadReg &rArr; cmt_spi3_read &rArr; GPIO_InitPeripheral
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmt2300_ReadReg
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmt2300_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_Process
</UL>

<P><STRONG><a name="[60]"></a>Cmt2300_ClearInterruptFlags</STRONG> (Thumb, 154 bytes, Stack size 24 bytes, cmt2300.o(.text.Cmt2300_ClearInterruptFlags))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = Cmt2300_ClearInterruptFlags &rArr; Cmt2300_ReadReg &rArr; cmt_spi3_read &rArr; GPIO_InitPeripheral
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmt2300_ReadReg
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmt2300_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmt2300_Init
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_Process
</UL>

<P><STRONG><a name="[61]"></a>Cmt2300_ConfigRegBank</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, cmt2300.o(.text.Cmt2300_ConfigRegBank))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = Cmt2300_ConfigRegBank &rArr; Cmt2300_WriteReg &rArr; cmt_spi3_write &rArr; GPIO_InitPeripheral
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmt2300_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_Init
</UL>

<P><STRONG><a name="[62]"></a>Cmt2300_EnableAntennaSwitch</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, cmt2300.o(.text.Cmt2300_EnableAntennaSwitch))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = Cmt2300_EnableAntennaSwitch &rArr; Cmt2300_ReadReg &rArr; cmt_spi3_read &rArr; GPIO_InitPeripheral
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmt2300_ReadReg
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmt2300_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_Init
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_Process
</UL>

<P><STRONG><a name="[63]"></a>Cmt2300_EnableInterrupt</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, cmt2300.o(.text.Cmt2300_EnableInterrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = Cmt2300_EnableInterrupt &rArr; Cmt2300_WriteReg &rArr; cmt_spi3_write &rArr; GPIO_InitPeripheral
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmt2300_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_Init
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_Process
</UL>

<P><STRONG><a name="[64]"></a>Cmt2300_EnableLfosc</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, cmt2300.o(.text.Cmt2300_EnableLfosc))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = Cmt2300_EnableLfosc &rArr; Cmt2300_ReadReg &rArr; cmt_spi3_read &rArr; GPIO_InitPeripheral
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmt2300_ReadReg
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmt2300_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_Init
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_Process
</UL>

<P><STRONG><a name="[65]"></a>Cmt2300_EnableReadFifo</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, cmt2300.o(.text.Cmt2300_EnableReadFifo))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = Cmt2300_EnableReadFifo &rArr; Cmt2300_ReadReg &rArr; cmt_spi3_read &rArr; GPIO_InitPeripheral
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmt2300_ReadReg
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmt2300_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_Process
</UL>

<P><STRONG><a name="[66]"></a>Cmt2300_EnableWriteFifo</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, cmt2300.o(.text.Cmt2300_EnableWriteFifo))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = Cmt2300_EnableWriteFifo &rArr; Cmt2300_ReadReg &rArr; cmt_spi3_read &rArr; GPIO_InitPeripheral
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmt2300_ReadReg
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmt2300_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_Process
</UL>

<P><STRONG><a name="[67]"></a>Cmt2300_GoRx</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, cmt2300.o(.text.Cmt2300_GoRx))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = Cmt2300_GoRx &rArr; Cmt2300_ReadReg &rArr; cmt_spi3_read &rArr; GPIO_InitPeripheral
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmt2300_ReadReg
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmt2300_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_Process
</UL>

<P><STRONG><a name="[69]"></a>Cmt2300_GoSleep</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, cmt2300.o(.text.Cmt2300_GoSleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = Cmt2300_GoSleep &rArr; Cmt2300_ReadReg &rArr; cmt_spi3_read &rArr; GPIO_InitPeripheral
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmt2300_ReadReg
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmt2300_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_Init
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_Process
</UL>

<P><STRONG><a name="[6a]"></a>Cmt2300_GoStby</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, cmt2300.o(.text.Cmt2300_GoStby))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = Cmt2300_GoStby &rArr; Cmt2300_ReadReg &rArr; cmt_spi3_read &rArr; GPIO_InitPeripheral
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmt2300_ReadReg
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmt2300_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_Process
</UL>

<P><STRONG><a name="[6b]"></a>Cmt2300_GoTx</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, cmt2300.o(.text.Cmt2300_GoTx))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = Cmt2300_GoTx &rArr; Cmt2300_ReadReg &rArr; cmt_spi3_read &rArr; GPIO_InitPeripheral
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmt2300_ReadReg
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmt2300_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_Process
</UL>

<P><STRONG><a name="[6c]"></a>Cmt2300_Init</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, cmt2300.o(.text.Cmt2300_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = Cmt2300_Init &rArr; Cmt2300_ClearInterruptFlags &rArr; Cmt2300_ReadReg &rArr; cmt_spi3_read &rArr; GPIO_InitPeripheral
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmt2300_ClearInterruptFlags
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmt2300_ReadReg
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmt2300_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_Init
</UL>

<P><STRONG><a name="[6e]"></a>Cmt2300_InitGpio</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, cmt2300_hal.o(.text.Cmt2300_InitGpio))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = Cmt2300_InitGpio &rArr; cmt_spi3_init &rArr; GPIO_InitPeripheral
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmt_spi3_init
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_Init
</UL>

<P><STRONG><a name="[70]"></a>Cmt2300_ReadFifo</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, cmt2300_hal.o(.text.Cmt2300_ReadFifo))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = Cmt2300_ReadFifo &rArr; cmt_spi3_read_fifo &rArr; GPIO_InitPeripheral
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmt_spi3_read_fifo
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_Process
</UL>

<P><STRONG><a name="[5e]"></a>Cmt2300_ReadReg</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, cmt2300_hal.o(.text.Cmt2300_ReadReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = Cmt2300_ReadReg &rArr; cmt_spi3_read &rArr; GPIO_InitPeripheral
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmt_spi3_read
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmt2300_GoTx
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmt2300_EnableWriteFifo
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmt2300_GoRx
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmt2300_ClearFifo
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmt2300_EnableReadFifo
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmt2300_ClearInterruptFlags
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmt2300_GoStby
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmt2300_GoSleep
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmt2300_EnableLfosc
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmt2300_EnableAntennaSwitch
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmt2300_Init
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_Process
</UL>

<P><STRONG><a name="[73]"></a>Cmt2300_SoftReset</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, cmt2300.o(.text.Cmt2300_SoftReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = Cmt2300_SoftReset &rArr; Cmt2300_WriteReg &rArr; cmt_spi3_write &rArr; GPIO_InitPeripheral
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmt2300_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_Process
</UL>

<P><STRONG><a name="[74]"></a>Cmt2300_WriteFifo</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, cmt2300_hal.o(.text.Cmt2300_WriteFifo))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = Cmt2300_WriteFifo &rArr; cmt_spi3_write_fifo &rArr; GPIO_InitPeripheral
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmt_spi3_write_fifo
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_Process
</UL>

<P><STRONG><a name="[5f]"></a>Cmt2300_WriteReg</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, cmt2300_hal.o(.text.Cmt2300_WriteReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = Cmt2300_WriteReg &rArr; cmt_spi3_write &rArr; GPIO_InitPeripheral
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmt_spi3_write
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_Init
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmt2300_GoTx
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmt2300_EnableWriteFifo
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmt2300_GoRx
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmt2300_ClearFifo
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmt2300_EnableReadFifo
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmt2300_ClearInterruptFlags
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmt2300_GoStby
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmt2300_SoftReset
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmt2300_GoSleep
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmt2300_EnableLfosc
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmt2300_EnableInterrupt
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmt2300_EnableAntennaSwitch
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmt2300_ConfigRegBank
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmt2300_Init
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_Process
</UL>

<P><STRONG><a name="[85]"></a>DMA_DeInit</STRONG> (Thumb, 188 bytes, Stack size 0 bytes, n32l40x_dma.o(.text.DMA_DeInit))
<BR><BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_DMA_Init
</UL>

<P><STRONG><a name="[89]"></a>DMA_EnableChannel</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, n32l40x_dma.o(.text.DMA_EnableChannel))
<BR><BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_DMA_Init
</UL>

<P><STRONG><a name="[86]"></a>DMA_Init</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, n32l40x_dma.o(.text.DMA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DMA_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_DMA_Init
</UL>

<P><STRONG><a name="[88]"></a>DMA_RequestRemap</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, n32l40x_dma.o(.text.DMA_RequestRemap))
<BR><BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_DMA_Init
</UL>

<P><STRONG><a name="[7]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, bsp_interrupt.o(.text.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32l40x.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, bsp_interrupt.o(.text.EXTI0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EXTI0_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClrITPendBit
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_GetITStatus
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_Callback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_n32l40x.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, bsp_interrupt.o(.text.EXTI15_10_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EXTI15_10_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClrITPendBit
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_GetITStatus
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_Callback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_n32l40x.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, bsp_interrupt.o(.text.EXTI1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EXTI1_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClrITPendBit
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_GetITStatus
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_Callback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_n32l40x.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, bsp_interrupt.o(.text.EXTI2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EXTI2_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClrITPendBit
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_GetITStatus
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_Callback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_n32l40x.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, bsp_interrupt.o(.text.EXTI3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EXTI3_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClrITPendBit
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_GetITStatus
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_Callback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_n32l40x.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, bsp_interrupt.o(.text.EXTI4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EXTI4_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClrITPendBit
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_GetITStatus
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_Callback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_n32l40x.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, bsp_interrupt.o(.text.EXTI9_5_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EXTI9_5_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClrITPendBit
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_GetITStatus
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_Callback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_n32l40x.o(RESET)
</UL>
<P><STRONG><a name="[78]"></a>EXTI_ClrITPendBit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, n32l40x_exti.o(.text.EXTI_ClrITPendBit))
<BR><BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI15_10_IRQHandler
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI9_5_IRQHandler
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI4_IRQHandler
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI3_IRQHandler
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI2_IRQHandler
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI1_IRQHandler
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI0_IRQHandler
</UL>

<P><STRONG><a name="[77]"></a>EXTI_GetITStatus</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, n32l40x_exti.o(.text.EXTI_GetITStatus))
<BR><BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI15_10_IRQHandler
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI9_5_IRQHandler
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI4_IRQHandler
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI3_IRQHandler
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI2_IRQHandler
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI1_IRQHandler
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI0_IRQHandler
</UL>

<P><STRONG><a name="[af]"></a>FLASH_PrefetchBufSet</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, n32l40x_flash.o(.text.FLASH_PrefetchBufSet))
<BR><BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[a7]"></a>FLASH_SetLatency</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, n32l40x_flash.o(.text.FLASH_SetLatency))
<BR><BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[7e]"></a>GPIO_InitPeripheral</STRONG> (Thumb, 392 bytes, Stack size 48 bytes, n32l40x_gpio.o(.text.GPIO_InitPeripheral))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = GPIO_InitPeripheral
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_SPI_Init
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspDeInit
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vBSP_ADC_Init
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_init
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs485_init
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vBSP_USARTInit
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vBSP_Port_FullSpeed
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmt_spi3_read_fifo
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmt_spi3_write_fifo
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmt_spi3_read
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmt_spi3_write
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmt_spi3_init
</UL>

<P><STRONG><a name="[7d]"></a>GPIO_InitStruct</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, n32l40x_gpio.o(.text.GPIO_InitStruct))
<BR><BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_SPI_Init
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspDeInit
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vBSP_ADC_Init
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vBSP_USARTInit
</UL>

<P><STRONG><a name="[7a]"></a>GPIO_ReadInputDataBit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, n32l40x_gpio.o(.text.GPIO_ReadInputDataBit))
<BR><BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_Callback
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hall_detect
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmt_spi3_read_fifo
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmt_spi3_read
</UL>

<P><STRONG><a name="[83]"></a>GPIO_ResetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, n32l40x_gpio.o(.text.GPIO_ResetBits))
<BR><BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Reg_Init
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_SPI_Init
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_dir_diff
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS485_SendStr_length
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hall_detect
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs485_init
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vBSP_Port_FullSpeed
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmt_spi3_read_fifo
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmt_spi3_write_fifo
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmt_spi3_read
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmt_spi3_write
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmt_spi3_init
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_mode
</UL>

<P><STRONG><a name="[8d]"></a>GPIO_SetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, n32l40x_gpio.o(.text.GPIO_SetBits))
<BR><BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Reg_Init
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_SPI_Init
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS485_SendStr_length
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_init
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmt_spi3_read_fifo
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmt_spi3_write_fifo
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmt_spi3_read
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmt_spi3_write
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmt_spi3_init
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_mode
</UL>

<P><STRONG><a name="[79]"></a>HAL_GPIO_EXTI_Callback</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, bsp_io.o(.text.HAL_GPIO_EXTI_Callback))
<BR><BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI15_10_IRQHandler
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI9_5_IRQHandler
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI4_IRQHandler
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI3_IRQHandler
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI2_IRQHandler
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI1_IRQHandler
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI0_IRQHandler
</UL>

<P><STRONG><a name="[a3]"></a>HAL_IncTick</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, bsp_timer.o(.text.HAL_IncTick))
<BR><BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[b3]"></a>HAL_TIM_PeriodElapsedCallback</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, bsp_timer.o(.text.HAL_TIM_PeriodElapsedCallback))
<BR><BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
</UL>

<P><STRONG><a name="[ba]"></a>HAL_UART_ErrorCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, bsp_usart.o(.text.HAL_UART_ErrorCallback))
<BR><BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART5_IRQHandler
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[b9]"></a>HAL_UART_IdleCallback</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, bsp_usart.o(.text.HAL_UART_IdleCallback))
<BR><BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART5_IRQHandler
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[7b]"></a>HAL_UART_MspDeInit</STRONG> (Thumb, 252 bytes, Stack size 32 bytes, bsp_usart.o(.text.HAL_UART_MspDeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_UART_MspDeInit &rArr; GPIO_InitPeripheral
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_InitStruct
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_InitPeripheral
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vBSP_GpioDeinit
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vBSP_USARTInit
</UL>

<P><STRONG><a name="[7f]"></a>HAL_UART_MspInit</STRONG> (Thumb, 456 bytes, Stack size 48 bytes, bsp_usart.o(.text.HAL_UART_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = HAL_UART_MspInit &rArr; GPIO_InitPeripheral
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_InitStruct
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_InitPeripheral
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_EnableAPB1PeriphClk
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_EnableAPB2PeriphClk
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vBSP_USARTInit
</UL>

<P><STRONG><a name="[b6]"></a>HAL_UART_RxCpltCallback</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, bsp_usart.o(.text.HAL_UART_RxCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART5_IRQHandler
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, bsp_interrupt.o(.text.HardFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_n32l40x.o(RESET)
</UL>
<P><STRONG><a name="[ea]"></a>IWDG_ReloadKey</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, n32l40x_iwdg.o(.text.IWDG_ReloadKey))
<BR><BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vBSP_WDG_Refresh
</UL>

<P><STRONG><a name="[3]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, bsp_interrupt.o(.text.MemManage_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_n32l40x.o(RESET)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, bsp_interrupt.o(.text.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32l40x.o(RESET)
</UL>
<P><STRONG><a name="[82]"></a>NVIC_Init</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, misc.o(.text.NVIC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_init
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs485_init
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vBSP_Timer1Init
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vBSP_USARTInit
</UL>

<P><STRONG><a name="[b0]"></a>NVIC_PriorityGroupConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, misc.o(.text.NVIC_PriorityGroupConfig))
<BR><BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[d5]"></a>OLED_Clear</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, oled.o(.text.OLED_Clear))
<BR><BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_show_line2
</UL>

<P><STRONG><a name="[84]"></a>OLED_DMA_Init</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, oled_spi.o(.text.OLED_DMA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = OLED_DMA_Init &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_RequestRemap
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_EnableChannel
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DeInit
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_EnableDma
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Reg_Init
</UL>

<P><STRONG><a name="[8a]"></a>OLED_Init</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, oled.o(.text.OLED_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = OLED_Init &rArr; OLED_SPI_Init &rArr; GPIO_InitPeripheral
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Reg_Init
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_SPI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d7]"></a>OLED_Long_HZ</STRONG> (Thumb, 1028 bytes, Stack size 60 bytes, oled.o(.text.OLED_Long_HZ))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = OLED_Long_HZ
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_show_line2
</UL>

<P><STRONG><a name="[8c]"></a>OLED_Reg_Init</STRONG> (Thumb, 972 bytes, Stack size 16 bytes, oled.o(.text.OLED_Reg_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = OLED_Reg_Init &rArr; OLED_DMA_Init &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_DMA_Init
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_GetStatus
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_TransmitData
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Init
</UL>

<P><STRONG><a name="[8b]"></a>OLED_SPI_Init</STRONG> (Thumb, 220 bytes, Stack size 24 bytes, oled_spi.o(.text.OLED_SPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = OLED_SPI_Init &rArr; GPIO_InitPeripheral
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_ConfigPclk2
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_InitStruct
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_InitPeripheral
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_SSOutputEnable
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Enable
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_EnableAPB2PeriphClk
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_EnableAHBPeriphClk
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Init
</UL>

<P><STRONG><a name="[d6]"></a>OLED_ZFC</STRONG> (Thumb, 202 bytes, Stack size 36 bytes, oled.o(.text.OLED_ZFC))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = OLED_ZFC
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_show_line2
</UL>

<P><STRONG><a name="[e3]"></a>RCC_ConfigAdc1mClk</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, n32l40x_rcc.o(.text.RCC_ConfigAdc1mClk))
<BR><BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vBSP_ADC_Init
</UL>

<P><STRONG><a name="[5c]"></a>RCC_ConfigAdcHclk</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, n32l40x_rcc.o(.text.RCC_ConfigAdcHclk))
<BR><BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ConfigClk
</UL>

<P><STRONG><a name="[5b]"></a>RCC_ConfigAdcPllClk</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, n32l40x_rcc.o(.text.RCC_ConfigAdcPllClk))
<BR><BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ConfigClk
</UL>

<P><STRONG><a name="[a8]"></a>RCC_ConfigHclk</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, n32l40x_rcc.o(.text.RCC_ConfigHclk))
<BR><BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[a9]"></a>RCC_ConfigPclk1</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, n32l40x_rcc.o(.text.RCC_ConfigPclk1))
<BR><BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[90]"></a>RCC_ConfigPclk2</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, n32l40x_rcc.o(.text.RCC_ConfigPclk2))
<BR><BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_SPI_Init
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[ab]"></a>RCC_ConfigPll</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, n32l40x_rcc.o(.text.RCC_ConfigPll))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RCC_ConfigPll
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[ad]"></a>RCC_ConfigSysclk</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, n32l40x_rcc.o(.text.RCC_ConfigSysclk))
<BR><BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[91]"></a>RCC_EnableAHBPeriphClk</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, n32l40x_rcc.o(.text.RCC_EnableAHBPeriphClk))
<BR><BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_SPI_Init
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vBSP_ADC_Init
</UL>

<P><STRONG><a name="[81]"></a>RCC_EnableAPB1PeriphClk</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, n32l40x_rcc.o(.text.RCC_EnableAPB1PeriphClk))
<BR><BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_init
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs485_init
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vBSP_Timer1Init
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vBSP_USARTInit
</UL>

<P><STRONG><a name="[be]"></a>RCC_EnableAPB1PeriphReset</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, n32l40x_rcc.o(.text.RCC_EnableAPB1PeriphReset))
<BR><BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DeInit
</UL>

<P><STRONG><a name="[80]"></a>RCC_EnableAPB2PeriphClk</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, n32l40x_rcc.o(.text.RCC_EnableAPB2PeriphClk))
<BR><BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_SPI_Init
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vBSP_ADC_Init
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_init
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs485_init
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vBSP_USARTInit
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vBSP_Port_FullSpeed
</UL>

<P><STRONG><a name="[bd]"></a>RCC_EnableAPB2PeriphReset</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, n32l40x_rcc.o(.text.RCC_EnableAPB2PeriphReset))
<BR><BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DeInit
</UL>

<P><STRONG><a name="[a5]"></a>RCC_EnableHsi</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, n32l40x_rcc.o(.text.RCC_EnableHsi))
<BR><BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[aa]"></a>RCC_EnablePll</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, n32l40x_rcc.o(.text.RCC_EnablePll))
<BR><BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[c0]"></a>RCC_GetClocksFreqValue</STRONG> (Thumb, 216 bytes, Stack size 16 bytes, n32l40x_rcc.o(.text.RCC_GetClocksFreqValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RCC_GetClocksFreqValue
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
</UL>

<P><STRONG><a name="[ac]"></a>RCC_GetFlagStatus</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, n32l40x_rcc.o(.text.RCC_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[ae]"></a>RCC_GetSysclkSrc</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, n32l40x_rcc.o(.text.RCC_GetSysclkSrc))
<BR><BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[a6]"></a>RCC_WaitHsiStable</STRONG> (Thumb, 48 bytes, Stack size 4 bytes, n32l40x_rcc.o(.text.RCC_WaitHsiStable))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = RCC_WaitHsiStable
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[95]"></a>RFInit</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rf.o(.text.RFInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = RFInit &rArr; RF_Init &rArr; Cmt2300_Init &rArr; Cmt2300_ClearInterruptFlags &rArr; Cmt2300_ReadReg &rArr; cmt_spi3_read &rArr; GPIO_InitPeripheral
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[97]"></a>RFRevData</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, rf.o(.text.RFRevData))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = RFRevData &rArr; RF_Process &rArr; Cmt2300_ClearInterruptFlags &rArr; Cmt2300_ReadReg &rArr; cmt_spi3_read &rArr; GPIO_InitPeripheral
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_StartRx
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_Process
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[9a]"></a>RFRxMode</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, rf.o(.text.RFRxMode))
<BR><BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_StartRx
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[96]"></a>RF_Init</STRONG> (Thumb, 148 bytes, Stack size 8 bytes, radio.o(.text.RF_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = RF_Init &rArr; Cmt2300_Init &rArr; Cmt2300_ClearInterruptFlags &rArr; Cmt2300_ReadReg &rArr; cmt_spi3_read &rArr; GPIO_InitPeripheral
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmt2300_GoSleep
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmt2300_WriteReg
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmt2300_EnableLfosc
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmt2300_EnableInterrupt
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmt2300_EnableAntennaSwitch
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmt2300_ConfigRegBank
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmt2300_Init
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmt2300_InitGpio
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFInit
</UL>

<P><STRONG><a name="[98]"></a>RF_Process</STRONG> (Thumb, 598 bytes, Stack size 16 bytes, radio.o(.text.RF_Process))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = RF_Process &rArr; Cmt2300_ClearInterruptFlags &rArr; Cmt2300_ReadReg &rArr; cmt_spi3_read &rArr; GPIO_InitPeripheral
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_set_dir
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_dir_diff
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_dir_state
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_mode
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmt2300_GoTx
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmt2300_WriteFifo
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmt2300_EnableWriteFifo
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmt2300_GoRx
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmt2300_ClearFifo
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmt2300_EnableReadFifo
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmt2300_ClearInterruptFlags
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmt2300_ReadFifo
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmt2300_ReadReg
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmt2300_GoStby
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmt2300_SoftReset
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmt2300_GoSleep
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmt2300_WriteReg
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmt2300_EnableLfosc
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmt2300_EnableInterrupt
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmt2300_EnableAntennaSwitch
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFRevData
</UL>

<P><STRONG><a name="[99]"></a>RF_StartRx</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, radio.o(.text.RF_StartRx))
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFRevData
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFRxMode
</UL>

<P><STRONG><a name="[a0]"></a>RS485_SendStr_length</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, 485_1.o(.text.RS485_SendStr_length))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RS485_SendStr_length
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_data_hadle
</UL>

<P><STRONG><a name="[94]"></a>SPI_Enable</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, n32l40x_spi.o(.text.SPI_Enable))
<BR><BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_SPI_Init
</UL>

<P><STRONG><a name="[87]"></a>SPI_I2S_EnableDma</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, n32l40x_spi.o(.text.SPI_I2S_EnableDma))
<BR><BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_DMA_Init
</UL>

<P><STRONG><a name="[8e]"></a>SPI_I2S_GetStatus</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, n32l40x_spi.o(.text.SPI_I2S_GetStatus))
<BR><BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Reg_Init
</UL>

<P><STRONG><a name="[8f]"></a>SPI_I2S_TransmitData</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, n32l40x_spi.o(.text.SPI_I2S_TransmitData))
<BR><BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Reg_Init
</UL>

<P><STRONG><a name="[92]"></a>SPI_Init</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, n32l40x_spi.o(.text.SPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SPI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_SPI_Init
</UL>

<P><STRONG><a name="[93]"></a>SPI_SSOutputEnable</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, n32l40x_spi.o(.text.SPI_SSOutputEnable))
<BR><BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_SPI_Init
</UL>

<P><STRONG><a name="[6]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, bsp_interrupt.o(.text.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32l40x.o(RESET)
</UL>
<P><STRONG><a name="[c5]"></a>SysTick_CLKSourceConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, misc.o(.text.SysTick_CLKSourceConfig))
<BR><BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[9]"></a>SysTick_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, bsp_interrupt.o(.text.SysTick_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IncTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_n32l40x.o(RESET)
</UL>
<P><STRONG><a name="[a4]"></a>SystemClock_Config</STRONG> (Thumb, 206 bytes, Stack size 8 bytes, main.o(.text.SystemClock_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SystemClock_Config &rArr; RCC_ConfigPll
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_ConfigPclk1
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_ConfigPclk2
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_ConfigHclk
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetSysclkSrc
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_ConfigSysclk
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetFlagStatus
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_PrefetchBufSet
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_SetLatency
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_PriorityGroupConfig
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_EnablePll
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_ConfigPll
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_EnableHsi
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_WaitHsiStable
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[4d]"></a>SystemInit</STRONG> (Thumb, 432 bytes, Stack size 16 bytes, system_n32l40x.o(.text.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SystemInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_n32l40x.o(.text)
</UL>
<P><STRONG><a name="[26]"></a>TIM2_IRQHandler</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, bsp_interrupt.o(.text.TIM2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM2_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClrIntPendingBit
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetIntStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_n32l40x.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>TIM3_IRQHandler</STRONG> (Thumb, 258 bytes, Stack size 16 bytes, motor.o(.text.TIM3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM3_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClrIntPendingBit
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetIntStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_n32l40x.o(RESET)
</UL>
<P><STRONG><a name="[b2]"></a>TIM_ClrIntPendingBit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, n32l40x_tim.o(.text.TIM_ClrIntPendingBit))
<BR><BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
</UL>

<P><STRONG><a name="[d3]"></a>TIM_ConfigInt</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, n32l40x_tim.o(.text.TIM_ConfigInt))
<BR><BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_init
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vBSP_Timer1Init
</UL>

<P><STRONG><a name="[d2]"></a>TIM_ConfigPrescaler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, n32l40x_tim.o(.text.TIM_ConfigPrescaler))
<BR><BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_init
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vBSP_Timer1Init
</UL>

<P><STRONG><a name="[d4]"></a>TIM_Enable</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, n32l40x_tim.o(.text.TIM_Enable))
<BR><BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_init
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vBSP_Timer1Init
</UL>

<P><STRONG><a name="[b1]"></a>TIM_GetIntStatus</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, n32l40x_tim.o(.text.TIM_GetIntStatus))
<BR><BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
</UL>

<P><STRONG><a name="[d1]"></a>TIM_InitTimeBase</STRONG> (Thumb, 396 bytes, Stack size 20 bytes, n32l40x_tim.o(.text.TIM_InitTimeBase))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TIM_InitTimeBase
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_init
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vBSP_Timer1Init
</UL>

<P><STRONG><a name="[3a]"></a>UART5_IRQHandler</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, bsp_interrupt.o(.text.UART5_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART5_IRQHandler &rArr; UART_TxCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_TxCallback
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IdleCallback
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClrIntPendingBit
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetIntStatus
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_n32l40x.o(RESET)
</UL>
<P><STRONG><a name="[b7]"></a>UART_TxCallback</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, bsp_usart.o(.text.UART_TxCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_TxCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ConfigInt
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART5_IRQHandler
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[2f]"></a>USART1_IRQHandler</STRONG> (Thumb, 114 bytes, Stack size 8 bytes, bsp_interrupt.o(.text.USART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USART1_IRQHandler &rArr; UART_TxCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_TxCallback
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IdleCallback
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClrIntPendingBit
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetIntStatus
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_n32l40x.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>USART2_IRQHandler</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, 485_1.o(.text.USART2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART2_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClrIntPendingBit
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetIntStatus
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_n32l40x.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>USART3_IRQHandler</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, bsp_interrupt.o(.text.USART3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USART3_IRQHandler &rArr; UART_TxCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_TxCallback
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IdleCallback
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClrIntPendingBit
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetIntStatus
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_n32l40x.o(RESET)
</UL>
<P><STRONG><a name="[b5]"></a>USART_ClrIntPendingBit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, n32l40x_usart.o(.text.USART_ClrIntPendingBit))
<BR><BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART5_IRQHandler
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[bb]"></a>USART_ConfigInt</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, n32l40x_usart.o(.text.USART_ConfigInt))
<BR><BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_TxCallback
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs485_init
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vBSP_USARTInit
</UL>

<P><STRONG><a name="[bc]"></a>USART_DeInit</STRONG> (Thumb, 174 bytes, Stack size 8 bytes, n32l40x_usart.o(.text.USART_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_EnableAPB2PeriphReset
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_EnableAPB1PeriphReset
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vBSP_USARTInit
</UL>

<P><STRONG><a name="[d9]"></a>USART_Enable</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, n32l40x_usart.o(.text.USART_Enable))
<BR><BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs485_init
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vBSP_USARTInit
</UL>

<P><STRONG><a name="[a2]"></a>USART_GetFlagStatus</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, n32l40x_usart.o(.text.USART_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS485_SendStr_length
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART5_IRQHandler
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[b4]"></a>USART_GetIntStatus</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, n32l40x_usart.o(.text.USART_GetIntStatus))
<BR><BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART5_IRQHandler
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[bf]"></a>USART_Init</STRONG> (Thumb, 170 bytes, Stack size 40 bytes, n32l40x_usart.o(.text.USART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = USART_Init &rArr; RCC_GetClocksFreqValue
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreqValue
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs485_init
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vBSP_USARTInit
</UL>

<P><STRONG><a name="[b8]"></a>USART_ReceiveData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, n32l40x_usart.o(.text.USART_ReceiveData))
<BR><BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART5_IRQHandler
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[a1]"></a>USART_SendData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, n32l40x_usart.o(.text.USART_SendData))
<BR><BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS485_SendStr_length
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_TxCallback
</UL>

<P><STRONG><a name="[e9]"></a>USART_StructInit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, n32l40x_usart.o(.text.USART_StructInit))
<BR><BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vBSP_USARTInit
</UL>

<P><STRONG><a name="[5]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, bsp_interrupt.o(.text.UsageFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_n32l40x.o(RESET)
</UL>
<P><STRONG><a name="[c1]"></a>clean_rebuff</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, 485_1.o(.text.clean_rebuff))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = clean_rebuff
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[6f]"></a>cmt_spi3_init</STRONG> (Thumb, 164 bytes, Stack size 40 bytes, cmt_spi3.o(.text.cmt_spi3_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = cmt_spi3_init &rArr; GPIO_InitPeripheral
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_InitPeripheral
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmt2300_InitGpio
</UL>

<P><STRONG><a name="[72]"></a>cmt_spi3_read</STRONG> (Thumb, 318 bytes, Stack size 48 bytes, cmt_spi3.o(.text.cmt_spi3_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = cmt_spi3_read &rArr; GPIO_InitPeripheral
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_InitPeripheral
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmt2300_ReadReg
</UL>

<P><STRONG><a name="[71]"></a>cmt_spi3_read_fifo</STRONG> (Thumb, 332 bytes, Stack size 56 bytes, cmt_spi3.o(.text.cmt_spi3_read_fifo))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = cmt_spi3_read_fifo &rArr; GPIO_InitPeripheral
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_InitPeripheral
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmt2300_ReadFifo
</UL>

<P><STRONG><a name="[76]"></a>cmt_spi3_write</STRONG> (Thumb, 312 bytes, Stack size 48 bytes, cmt_spi3.o(.text.cmt_spi3_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = cmt_spi3_write &rArr; GPIO_InitPeripheral
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_InitPeripheral
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmt2300_WriteReg
</UL>

<P><STRONG><a name="[75]"></a>cmt_spi3_write_fifo</STRONG> (Thumb, 342 bytes, Stack size 56 bytes, cmt_spi3.o(.text.cmt_spi3_write_fifo))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = cmt_spi3_write_fifo &rArr; GPIO_InitPeripheral
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_InitPeripheral
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmt2300_WriteFifo
</UL>

<P><STRONG><a name="[6d]"></a>delay_ms</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, delay.o(.text.delay_ms))
<BR><BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Reg_Init
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vBSP_DelayMs
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmt2300_Init
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_Process
</UL>

<P><STRONG><a name="[68]"></a>delay_us</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, delay.o(.text.delay_us))
<BR><BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS485_SendStr_length
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmt_spi3_read_fifo
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmt_spi3_write_fifo
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmt2300_GoTx
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmt2300_GoRx
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmt2300_GoStby
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmt2300_GoSleep
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmt2300_Init
</UL>

<P><STRONG><a name="[4f]"></a>fputc</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, bsp_usart.o(.text.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vBSP_WDG_Refresh
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printf8.o(i.__0printf$8)
</UL>
<P><STRONG><a name="[9b]"></a>get_dir_state</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, motor.o(.text.get_dir_state))
<BR><BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_data_hadle
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_Process
</UL>

<P><STRONG><a name="[cf]"></a>get_rebuff</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, 485_1.o(.text.get_rebuff))
<BR><BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c4]"></a>hall_detect</STRONG> (Thumb, 130 bytes, Stack size 8 bytes, motor.o(.text.hall_detect))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = hall_detect
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[4c]"></a>main</STRONG> (Thumb, 284 bytes, Stack size 0 bytes, main.o(.text.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = main &rArr; RFRevData &rArr; RF_Process &rArr; Cmt2300_ClearInterruptFlags &rArr; Cmt2300_ReadReg &rArr; cmt_spi3_read &rArr; GPIO_InitPeripheral
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_CLKSourceConfig
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clean_rebuff
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_data_hadle
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_rebuff
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPower_Motor
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_show_line2
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPower_Device
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFRevData
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hall_detect
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vBSP_ADC_Init
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_init
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFRxMode
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFInit
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Init
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs485_init
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vBSP_Timer1Init
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vBSP_USARTInit
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vBSP_Port_FullSpeed
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[9e]"></a>motor_dir_diff</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, motor.o(.text.motor_dir_diff))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = motor_dir_diff
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_data_hadle
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_Process
</UL>

<P><STRONG><a name="[ca]"></a>motor_init</STRONG> (Thumb, 270 bytes, Stack size 64 bytes, motor.o(.text.motor_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = motor_init &rArr; GPIO_InitPeripheral
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_InitPeripheral
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_EnableAPB1PeriphClk
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ConfigPrescaler
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ConfigInt
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Enable
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_InitTimeBase
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_EnableAPB2PeriphClk
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[9d]"></a>motor_mode</STRONG> (Thumb, 214 bytes, Stack size 8 bytes, motor.o(.text.motor_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = motor_mode
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_Process
</UL>

<P><STRONG><a name="[9f]"></a>motor_set_dir</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, motor.o(.text.motor_set_dir))
<BR><BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_data_hadle
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_Process
</UL>

<P><STRONG><a name="[cd]"></a>oled_show_line2</STRONG> (Thumb, 280 bytes, Stack size 40 bytes, oled_show.o(.text.oled_show_line2))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = oled_show_line2 &rArr; OLED_Long_HZ
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Long_HZ
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ZFC
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Clear
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c9]"></a>rs485_init</STRONG> (Thumb, 220 bytes, Stack size 64 bytes, 485_1.o(.text.rs485_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = rs485_init &rArr; USART_Init &rArr; RCC_GetClocksFreqValue
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_InitPeripheral
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_EnableAPB1PeriphClk
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ConfigInt
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Enable
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_EnableAPB2PeriphClk
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d0]"></a>rx_data_hadle</STRONG> (Thumb, 348 bytes, Stack size 40 bytes, protocol.o(.text.rx_data_hadle))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = rx_data_hadle &rArr; RS485_SendStr_length
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_set_dir
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_dir_diff
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_dir_state
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS485_SendStr_length
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xy_frame_calc_xor
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[dc]"></a>usGetMCUADCVolt</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, bsp_adc.o(.text.usGetMCUADCVolt))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = usGetMCUADCVolt &rArr; ADC_ConfigRegularChannel
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ClearFlag
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetFlagStatus
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetDat
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ConfigRegularChannel
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_EnableSoftwareStartConv
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vBSP_DelayMs
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPower_Motor
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPower_Device
</UL>

<P><STRONG><a name="[cb]"></a>vBSP_ADC_Init</STRONG> (Thumb, 146 bytes, Stack size 40 bytes, bsp_adc.o(.text.vBSP_ADC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = vBSP_ADC_Init &rArr; GPIO_InitPeripheral
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_InitStruct
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_InitPeripheral
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ConfigClk
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetFlagStatusNew
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetCalibrationStatus
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_StartCalibration
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Enable
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_EnableAPB2PeriphClk
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_EnableAHBPeriphClk
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_ConfigAdc1mClk
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e2]"></a>vBSP_DelayMs</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, bsp_timer.o(.text.vBSP_DelayMs))
<BR><BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usGetMCUADCVolt
</UL>

<P><STRONG><a name="[7c]"></a>vBSP_GpioDeinit</STRONG> (Thumb, 286 bytes, Stack size 40 bytes, bsp_io.o(.text.vBSP_GpioDeinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = vBSP_GpioDeinit
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspDeInit
</UL>

<P><STRONG><a name="[c6]"></a>vBSP_Port_FullSpeed</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, bsp_io.o(.text.vBSP_Port_FullSpeed))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = vBSP_Port_FullSpeed &rArr; GPIO_InitPeripheral
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_InitPeripheral
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_EnableAPB2PeriphClk
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c8]"></a>vBSP_Timer1Init</STRONG> (Thumb, 144 bytes, Stack size 40 bytes, bsp_timer.o(.text.vBSP_Timer1Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = vBSP_Timer1Init &rArr; TIM_InitTimeBase
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_EnableAPB1PeriphClk
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ConfigPrescaler
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ConfigInt
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Enable
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_InitTimeBase
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c7]"></a>vBSP_USARTInit</STRONG> (Thumb, 598 bytes, Stack size 40 bytes, bsp_usart.o(.text.vBSP_USARTInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = vBSP_USARTInit &rArr; HAL_UART_MspInit &rArr; GPIO_InitPeripheral
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_InitStruct
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_InitPeripheral
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_EnableAPB1PeriphClk
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspDeInit
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ConfigInt
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Enable
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_StructInit
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DeInit
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_EnableAPB2PeriphClk
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c3]"></a>vBSP_WDG_Refresh</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, bsp_wdg.o(.text.vBSP_WDG_Refresh))
<BR><BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_ReloadKey
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[cc]"></a>vPower_Device</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, bsp_adc.o(.text.vPower_Device))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = vPower_Device &rArr; usGetMCUADCVolt &rArr; ADC_ConfigRegularChannel
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usGetMCUADCVolt
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ce]"></a>vPower_Motor</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, bsp_adc.o(.text.vPower_Motor))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = vPower_Motor &rArr; usGetMCUADCVolt &rArr; ADC_ConfigRegularChannel
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usGetMCUADCVolt
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[db]"></a>xy_frame_calc_xor</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, api.o(.text.xy_frame_calc_xor))
<BR><BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_data_hadle
</UL>

<P><STRONG><a name="[eb]"></a>__0printf$8</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, printf8.o(i.__0printf$8), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[fe]"></a>__1printf$8</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf8.o(i.__0printf$8), UNUSED)

<P><STRONG><a name="[da]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf8.o(i.__0printf$8))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_data_hadle
</UL>

<P><STRONG><a name="[ed]"></a>__0sprintf$8</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, printf8.o(i.__0sprintf$8), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[ff]"></a>__1sprintf$8</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf8.o(i.__0sprintf$8), UNUSED)

<P><STRONG><a name="[d8]"></a>__2sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf8.o(i.__0sprintf$8))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_show_line2
</UL>

<P><STRONG><a name="[100]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[101]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[102]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[9c]"></a>puts</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, puts.o(i.puts))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = puts &rArr; fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_Process
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[ec]"></a>_printf_core</STRONG> (Thumb, 996 bytes, Stack size 104 bytes, printf8.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf$8
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf$8
</UL>

<P><STRONG><a name="[ef]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printf8.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[ee]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printf8.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[50]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, printf8.o(i._sputc))
<BR><BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf$8
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printf8.o(i.__0sprintf$8)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
