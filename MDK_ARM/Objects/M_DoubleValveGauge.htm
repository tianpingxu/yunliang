<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\M_DoubleValveGauge.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\M_DoubleValveGauge.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060750: Last Updated: Tue Apr 22 16:41:19 2025
<BR><P>
<H3>Maximum Stack Usage =        100 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; vBSP_USARTInit &rArr; USART_Init &rArr; RCC_GetClocksFreqValue
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[9]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[9]">PendSV_Handler</a><BR>
 <LI><a href="#[1e]">ADC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1e]">ADC_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1e]">ADC_IRQHandler</a> from startup_n32l40x.o(.text) referenced from startup_n32l40x.o(RESET)
 <LI><a href="#[5]">BusFault_Handler</a> from bsp_interrupt.o(i.BusFault_Handler) referenced from startup_n32l40x.o(RESET)
 <LI><a href="#[41]">CAN_RX0_IRQHandler</a> from startup_n32l40x.o(.text) referenced from startup_n32l40x.o(RESET)
 <LI><a href="#[42]">CAN_RX1_IRQHandler</a> from startup_n32l40x.o(.text) referenced from startup_n32l40x.o(RESET)
 <LI><a href="#[43]">CAN_SCE_IRQHandler</a> from startup_n32l40x.o(.text) referenced from startup_n32l40x.o(RESET)
 <LI><a href="#[40]">CAN_TX_IRQHandler</a> from startup_n32l40x.o(.text) referenced from startup_n32l40x.o(RESET)
 <LI><a href="#[21]">COMP_1_2_IRQHandler</a> from startup_n32l40x.o(.text) referenced from startup_n32l40x.o(RESET)
 <LI><a href="#[16]">DMA_Channel1_IRQHandler</a> from startup_n32l40x.o(.text) referenced from startup_n32l40x.o(RESET)
 <LI><a href="#[17]">DMA_Channel2_IRQHandler</a> from startup_n32l40x.o(.text) referenced from startup_n32l40x.o(RESET)
 <LI><a href="#[18]">DMA_Channel3_IRQHandler</a> from startup_n32l40x.o(.text) referenced from startup_n32l40x.o(RESET)
 <LI><a href="#[19]">DMA_Channel4_IRQHandler</a> from startup_n32l40x.o(.text) referenced from startup_n32l40x.o(RESET)
 <LI><a href="#[1a]">DMA_Channel5_IRQHandler</a> from startup_n32l40x.o(.text) referenced from startup_n32l40x.o(RESET)
 <LI><a href="#[1b]">DMA_Channel6_IRQHandler</a> from startup_n32l40x.o(.text) referenced from startup_n32l40x.o(RESET)
 <LI><a href="#[1c]">DMA_Channel7_IRQHandler</a> from startup_n32l40x.o(.text) referenced from startup_n32l40x.o(RESET)
 <LI><a href="#[1d]">DMA_Channel8_IRQHandler</a> from startup_n32l40x.o(.text) referenced from startup_n32l40x.o(RESET)
 <LI><a href="#[8]">DebugMon_Handler</a> from bsp_interrupt.o(i.DebugMon_Handler) referenced from startup_n32l40x.o(RESET)
 <LI><a href="#[11]">EXTI0_IRQHandler</a> from bsp_interrupt.o(i.EXTI0_IRQHandler) referenced from startup_n32l40x.o(RESET)
 <LI><a href="#[33]">EXTI15_10_IRQHandler</a> from bsp_interrupt.o(i.EXTI15_10_IRQHandler) referenced from startup_n32l40x.o(RESET)
 <LI><a href="#[12]">EXTI1_IRQHandler</a> from bsp_interrupt.o(i.EXTI1_IRQHandler) referenced from startup_n32l40x.o(RESET)
 <LI><a href="#[13]">EXTI2_IRQHandler</a> from bsp_interrupt.o(i.EXTI2_IRQHandler) referenced from startup_n32l40x.o(RESET)
 <LI><a href="#[14]">EXTI3_IRQHandler</a> from bsp_interrupt.o(i.EXTI3_IRQHandler) referenced from startup_n32l40x.o(RESET)
 <LI><a href="#[15]">EXTI4_IRQHandler</a> from bsp_interrupt.o(i.EXTI4_IRQHandler) referenced from startup_n32l40x.o(RESET)
 <LI><a href="#[22]">EXTI9_5_IRQHandler</a> from bsp_interrupt.o(i.EXTI9_5_IRQHandler) referenced from startup_n32l40x.o(RESET)
 <LI><a href="#[f]">FLASH_IRQHandler</a> from startup_n32l40x.o(.text) referenced from startup_n32l40x.o(RESET)
 <LI><a href="#[3]">HardFault_Handler</a> from bsp_interrupt.o(i.HardFault_Handler) referenced from startup_n32l40x.o(RESET)
 <LI><a href="#[2b]">I2C1_ER_IRQHandler</a> from startup_n32l40x.o(.text) referenced from startup_n32l40x.o(RESET)
 <LI><a href="#[2a]">I2C1_EV_IRQHandler</a> from startup_n32l40x.o(.text) referenced from startup_n32l40x.o(RESET)
 <LI><a href="#[2d]">I2C2_ER_IRQHandler</a> from startup_n32l40x.o(.text) referenced from startup_n32l40x.o(RESET)
 <LI><a href="#[2c]">I2C2_EV_IRQHandler</a> from startup_n32l40x.o(.text) referenced from startup_n32l40x.o(RESET)
 <LI><a href="#[46]">LCD_IRQHandler</a> from startup_n32l40x.o(.text) referenced from startup_n32l40x.o(RESET)
 <LI><a href="#[45]">LPTIM_WKUP_IRQHandler</a> from startup_n32l40x.o(.text) referenced from startup_n32l40x.o(RESET)
 <LI><a href="#[3c]">LPUART_IRQHandler</a> from startup_n32l40x.o(.text) referenced from startup_n32l40x.o(RESET)
 <LI><a href="#[44]">LPUART_WKUP_IRQHandler</a> from startup_n32l40x.o(.text) referenced from startup_n32l40x.o(RESET)
 <LI><a href="#[48]">MMU_IRQHandler</a> from startup_n32l40x.o(.text) referenced from startup_n32l40x.o(RESET)
 <LI><a href="#[4]">MemManage_Handler</a> from bsp_interrupt.o(i.MemManage_Handler) referenced from startup_n32l40x.o(RESET)
 <LI><a href="#[2]">NMI_Handler</a> from bsp_interrupt.o(i.NMI_Handler) referenced from startup_n32l40x.o(RESET)
 <LI><a href="#[c]">PVD_IRQHandler</a> from startup_n32l40x.o(.text) referenced from startup_n32l40x.o(RESET)
 <LI><a href="#[9]">PendSV_Handler</a> from startup_n32l40x.o(.text) referenced from startup_n32l40x.o(RESET)
 <LI><a href="#[4a]">RAMC_PERR_IRQHandler</a> from startup_n32l40x.o(.text) referenced from startup_n32l40x.o(RESET)
 <LI><a href="#[10]">RCC_IRQHandler</a> from startup_n32l40x.o(.text) referenced from startup_n32l40x.o(RESET)
 <LI><a href="#[34]">RTCAlarm_IRQHandler</a> from startup_n32l40x.o(.text) referenced from startup_n32l40x.o(RESET)
 <LI><a href="#[e]">RTC_WKUP_IRQHandler</a> from bsp_interrupt.o(i.RTC_WKUP_IRQHandler) referenced from startup_n32l40x.o(RESET)
 <LI><a href="#[1]">Reset_Handler</a> from startup_n32l40x.o(.text) referenced from startup_n32l40x.o(RESET)
 <LI><a href="#[47]">SAC_IRQHandler</a> from startup_n32l40x.o(.text) referenced from startup_n32l40x.o(RESET)
 <LI><a href="#[2e]">SPI1_IRQHandler</a> from startup_n32l40x.o(.text) referenced from startup_n32l40x.o(RESET)
 <LI><a href="#[2f]">SPI2_IRQHandler</a> from startup_n32l40x.o(.text) referenced from startup_n32l40x.o(RESET)
 <LI><a href="#[7]">SVC_Handler</a> from bsp_interrupt.o(i.SVC_Handler) referenced from startup_n32l40x.o(RESET)
 <LI><a href="#[a]">SysTick_Handler</a> from bsp_interrupt.o(i.SysTick_Handler) referenced from startup_n32l40x.o(RESET)
 <LI><a href="#[4e]">SystemInit</a> from system_n32l40x.o(i.SystemInit) referenced from startup_n32l40x.o(.text)
 <LI><a href="#[d]">TAMPER_IRQHandler</a> from startup_n32l40x.o(.text) referenced from startup_n32l40x.o(RESET)
 <LI><a href="#[23]">TIM1_BRK_IRQHandler</a> from startup_n32l40x.o(.text) referenced from startup_n32l40x.o(RESET)
 <LI><a href="#[26]">TIM1_CC_IRQHandler</a> from startup_n32l40x.o(.text) referenced from startup_n32l40x.o(RESET)
 <LI><a href="#[25]">TIM1_TRG_COM_IRQHandler</a> from startup_n32l40x.o(.text) referenced from startup_n32l40x.o(RESET)
 <LI><a href="#[24]">TIM1_UP_IRQHandler</a> from startup_n32l40x.o(.text) referenced from startup_n32l40x.o(RESET)
 <LI><a href="#[27]">TIM2_IRQHandler</a> from bsp_interrupt.o(i.TIM2_IRQHandler) referenced from startup_n32l40x.o(RESET)
 <LI><a href="#[28]">TIM3_IRQHandler</a> from bsp_interrupt.o(i.TIM3_IRQHandler) referenced from startup_n32l40x.o(RESET)
 <LI><a href="#[29]">TIM4_IRQHandler</a> from startup_n32l40x.o(.text) referenced from startup_n32l40x.o(RESET)
 <LI><a href="#[3d]">TIM5_IRQHandler</a> from startup_n32l40x.o(.text) referenced from startup_n32l40x.o(RESET)
 <LI><a href="#[3e]">TIM6_IRQHandler</a> from startup_n32l40x.o(.text) referenced from startup_n32l40x.o(RESET)
 <LI><a href="#[3f]">TIM7_IRQHandler</a> from startup_n32l40x.o(.text) referenced from startup_n32l40x.o(RESET)
 <LI><a href="#[36]">TIM8_BRK_IRQHandler</a> from startup_n32l40x.o(.text) referenced from startup_n32l40x.o(RESET)
 <LI><a href="#[39]">TIM8_CC_IRQHandler</a> from startup_n32l40x.o(.text) referenced from startup_n32l40x.o(RESET)
 <LI><a href="#[38]">TIM8_TRG_COM_IRQHandler</a> from startup_n32l40x.o(.text) referenced from startup_n32l40x.o(RESET)
 <LI><a href="#[37]">TIM8_UP_IRQHandler</a> from startup_n32l40x.o(.text) referenced from startup_n32l40x.o(RESET)
 <LI><a href="#[4b]">TIM9_IRQHandler</a> from startup_n32l40x.o(.text) referenced from startup_n32l40x.o(RESET)
 <LI><a href="#[49]">TSC_IRQHandler</a> from startup_n32l40x.o(.text) referenced from startup_n32l40x.o(RESET)
 <LI><a href="#[3a]">UART4_IRQHandler</a> from startup_n32l40x.o(.text) referenced from startup_n32l40x.o(RESET)
 <LI><a href="#[3b]">UART5_IRQHandler</a> from bsp_interrupt.o(i.UART5_IRQHandler) referenced from startup_n32l40x.o(RESET)
 <LI><a href="#[4c]">UCDR_IRQHandler</a> from startup_n32l40x.o(.text) referenced from startup_n32l40x.o(RESET)
 <LI><a href="#[30]">USART1_IRQHandler</a> from bsp_interrupt.o(i.USART1_IRQHandler) referenced from startup_n32l40x.o(RESET)
 <LI><a href="#[31]">USART2_IRQHandler</a> from bsp_interrupt.o(i.USART2_IRQHandler) referenced from startup_n32l40x.o(RESET)
 <LI><a href="#[32]">USART3_IRQHandler</a> from bsp_interrupt.o(i.USART3_IRQHandler) referenced from startup_n32l40x.o(RESET)
 <LI><a href="#[35]">USBWakeUp_IRQHandler</a> from startup_n32l40x.o(.text) referenced from startup_n32l40x.o(RESET)
 <LI><a href="#[1f]">USB_HP_IRQHandler</a> from startup_n32l40x.o(.text) referenced from startup_n32l40x.o(RESET)
 <LI><a href="#[20]">USB_LP_IRQHandler</a> from startup_n32l40x.o(.text) referenced from startup_n32l40x.o(RESET)
 <LI><a href="#[6]">UsageFault_Handler</a> from bsp_interrupt.o(i.UsageFault_Handler) referenced from startup_n32l40x.o(RESET)
 <LI><a href="#[b]">WWDG_IRQHandler</a> from startup_n32l40x.o(.text) referenced from startup_n32l40x.o(RESET)
 <LI><a href="#[4f]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_n32l40x.o(.text)
 <LI><a href="#[50]">fputc</a> from bsp_usart.o(i.fputc) referenced from printf8.o(i.__0printf$8)
 <LI><a href="#[4d]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[4f]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32l40x.o(.text)
</UL>
<P><STRONG><a name="[af]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[51]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[56]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[b0]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[b1]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[b2]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[b3]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[b4]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[1]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_n32l40x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32l40x.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_n32l40x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_n32l40x.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32l40x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_n32l40x.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>CAN_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32l40x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32l40x.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>CAN_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32l40x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32l40x.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>CAN_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32l40x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32l40x.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>CAN_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32l40x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32l40x.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>COMP_1_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32l40x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32l40x.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>DMA_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32l40x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32l40x.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>DMA_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32l40x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32l40x.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>DMA_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32l40x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32l40x.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>DMA_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32l40x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32l40x.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DMA_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32l40x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32l40x.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>DMA_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32l40x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32l40x.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>DMA_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32l40x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32l40x.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>DMA_Channel8_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32l40x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32l40x.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32l40x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32l40x.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32l40x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32l40x.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32l40x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32l40x.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32l40x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32l40x.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32l40x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32l40x.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>LCD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32l40x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32l40x.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>LPTIM_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32l40x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32l40x.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>LPUART_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32l40x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32l40x.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>LPUART_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32l40x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32l40x.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>MMU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32l40x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32l40x.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32l40x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32l40x.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>RAMC_PERR_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32l40x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32l40x.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32l40x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32l40x.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>RTCAlarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32l40x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32l40x.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>SAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32l40x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32l40x.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32l40x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32l40x.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32l40x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32l40x.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>TAMPER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32l40x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32l40x.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>TIM1_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32l40x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32l40x.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32l40x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32l40x.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>TIM1_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32l40x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32l40x.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>TIM1_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32l40x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32l40x.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32l40x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32l40x.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32l40x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32l40x.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>TIM6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32l40x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32l40x.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32l40x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32l40x.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>TIM8_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32l40x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32l40x.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32l40x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32l40x.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>TIM8_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32l40x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32l40x.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>TIM8_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32l40x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32l40x.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>TIM9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32l40x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32l40x.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>TSC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32l40x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32l40x.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32l40x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32l40x.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>UCDR_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32l40x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32l40x.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>USBWakeUp_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32l40x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32l40x.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>USB_HP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32l40x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32l40x.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>USB_LP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32l40x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32l40x.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32l40x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32l40x.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[55]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[b5]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[54]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[b6]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[52]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[b7]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[9d]"></a>ADC_ClearFlag</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, n32l40x_adc.o(i.ADC_ClearFlag))
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usGetMCUADCVolt
</UL>

<P><STRONG><a name="[9a]"></a>ADC_ConfigRegularChannel</STRONG> (Thumb, 198 bytes, Stack size 20 bytes, n32l40x_adc.o(i.ADC_ConfigRegularChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ADC_ConfigRegularChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usGetMCUADCVolt
</UL>

<P><STRONG><a name="[9b]"></a>ADC_EnableSoftwareStartConv</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, n32l40x_adc.o(i.ADC_EnableSoftwareStartConv))
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usGetMCUADCVolt
</UL>

<P><STRONG><a name="[9e]"></a>ADC_GetDat</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, n32l40x_adc.o(i.ADC_GetDat))
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usGetMCUADCVolt
</UL>

<P><STRONG><a name="[ac]"></a>ADC_GetFlagStatus</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, n32l40x_adc.o(i.ADC_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vBsp_ADC_PollForConversion
</UL>

<P><STRONG><a name="[5]"></a>BusFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, bsp_interrupt.o(i.BusFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32l40x.o(RESET)
</UL>
<P><STRONG><a name="[70]"></a>ConfigMRVoltage1V</STRONG> (Thumb, 124 bytes, Stack size 0 bytes, system_n32l40x.o(i.ConfigMRVoltage1V))
<BR><BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>

<P><STRONG><a name="[8]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, bsp_interrupt.o(i.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32l40x.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, bsp_interrupt.o(i.EXTI0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EXTI0_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClrITPendBit
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_Callback
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_GetITStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_n32l40x.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, bsp_interrupt.o(i.EXTI15_10_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = EXTI15_10_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClrITPendBit
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_Callback
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_GetITStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_n32l40x.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, bsp_interrupt.o(i.EXTI1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EXTI1_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClrITPendBit
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_Callback
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_GetITStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_n32l40x.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, bsp_interrupt.o(i.EXTI2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EXTI2_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClrITPendBit
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_Callback
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_GetITStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_n32l40x.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, bsp_interrupt.o(i.EXTI3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EXTI3_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClrITPendBit
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_Callback
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_GetITStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_n32l40x.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, bsp_interrupt.o(i.EXTI4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EXTI4_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClrITPendBit
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_Callback
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_GetITStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_n32l40x.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, bsp_interrupt.o(i.EXTI9_5_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = EXTI9_5_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClrITPendBit
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_Callback
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_GetITStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_n32l40x.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>EXTI_ClrITPendBit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, n32l40x_exti.o(i.EXTI_ClrITPendBit))
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vBSP_Port_FullSpeed
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WKUP_IRQHandler
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI9_5_IRQHandler
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI4_IRQHandler
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI3_IRQHandler
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI2_IRQHandler
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI1_IRQHandler
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI15_10_IRQHandler
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI0_IRQHandler
</UL>

<P><STRONG><a name="[57]"></a>EXTI_GetITStatus</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, n32l40x_exti.o(i.EXTI_GetITStatus))
<BR><BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI9_5_IRQHandler
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI4_IRQHandler
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI3_IRQHandler
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI2_IRQHandler
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI1_IRQHandler
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI15_10_IRQHandler
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI0_IRQHandler
</UL>

<P><STRONG><a name="[a3]"></a>EXTI_InitPeripheral</STRONG> (Thumb, 142 bytes, Stack size 0 bytes, n32l40x_exti.o(i.EXTI_InitPeripheral))
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vBSP_Port_FullSpeed
</UL>

<P><STRONG><a name="[7c]"></a>FLASH_PrefetchBufSet</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, n32l40x_flash.o(i.FLASH_PrefetchBufSet))
<BR><BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[74]"></a>FLASH_SetLatency</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, n32l40x_flash.o(i.FLASH_SetLatency))
<BR><BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[a2]"></a>GPIO_ConfigEXTILine</STRONG> (Thumb, 58 bytes, Stack size 12 bytes, n32l40x_gpio.o(i.GPIO_ConfigEXTILine))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = GPIO_ConfigEXTILine
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vBSP_Port_FullSpeed
</UL>

<P><STRONG><a name="[61]"></a>GPIO_InitPeripheral</STRONG> (Thumb, 484 bytes, Stack size 20 bytes, n32l40x_gpio.o(i.GPIO_InitPeripheral))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPIO_InitPeripheral
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vBSP_Port_FullSpeed
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspDeInit
</UL>

<P><STRONG><a name="[60]"></a>GPIO_InitStruct</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, n32l40x_gpio.o(i.GPIO_InitStruct))
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vBSP_Port_FullSpeed
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspDeInit
</UL>

<P><STRONG><a name="[ad]"></a>GPIO_ReadInputDataBit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, n32l40x_gpio.o(i.GPIO_ReadInputDataBit))
<BR><BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vKeyCheck
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPowerOnEventCheck
</UL>

<P><STRONG><a name="[a1]"></a>GPIO_WriteBit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, n32l40x_gpio.o(i.GPIO_WriteBit))
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vBSP_Port_FullSpeed
</UL>

<P><STRONG><a name="[59]"></a>HAL_GPIO_EXTI_Callback</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, bsp_io.o(i.HAL_GPIO_EXTI_Callback))
<BR><BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI9_5_IRQHandler
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI4_IRQHandler
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI3_IRQHandler
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI2_IRQHandler
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI1_IRQHandler
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI15_10_IRQHandler
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI0_IRQHandler
</UL>

<P><STRONG><a name="[ab]"></a>HAL_GetTick</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, bsp_timer.o(i.HAL_GetTick))
<BR><BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vBsp_ADC_PollForConversion
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vSysTickDelay
</UL>

<P><STRONG><a name="[71]"></a>HAL_IncTick</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, bsp_timer.o(i.HAL_IncTick))
<BR><BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[6c]"></a>HAL_RTCEx_WakeUpTimerEventCallback</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, bsp_rtc.o(i.HAL_RTCEx_WakeUpTimerEventCallback))
<BR><BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WKUP_IRQHandler
</UL>

<P><STRONG><a name="[5a]"></a>HAL_TIM_PeriodElapsedCallback</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, bsp_timer.o(i.HAL_TIM_PeriodElapsedCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_TIM_PeriodElapsedCallback &rArr; vKeyCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vComLostOtCallback
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vKeyCheck
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
</UL>

<P><STRONG><a name="[85]"></a>HAL_UART_ErrorCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, bsp_usart.o(i.HAL_UART_ErrorCallback))
<BR><BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART5_IRQHandler
</UL>

<P><STRONG><a name="[84]"></a>HAL_UART_IdleCallback</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, bsp_usart.o(i.HAL_UART_IdleCallback))
<BR><BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART5_IRQHandler
</UL>

<P><STRONG><a name="[5d]"></a>HAL_UART_MspDeInit</STRONG> (Thumb, 240 bytes, Stack size 24 bytes, bsp_usart.o(i.HAL_UART_MspDeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = HAL_UART_MspDeInit &rArr; GPIO_InitPeripheral
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_InitStruct
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_DisableIRQ
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_InitPeripheral
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vBSP_GpioDeinit
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vBSP_USARTDeInit
</UL>

<P><STRONG><a name="[62]"></a>HAL_UART_MspInit</STRONG> (Thumb, 426 bytes, Stack size 32 bytes, bsp_usart.o(i.HAL_UART_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = HAL_UART_MspInit &rArr; GPIO_InitPeripheral
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_EnableAPB1PeriphClk
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_InitStruct
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_EnableAPB2PeriphClk
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_InitPeripheral
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vBSP_USARTInit
</UL>

<P><STRONG><a name="[66]"></a>HAL_UART_RxCpltCallback</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, bsp_usart.o(i.HAL_UART_RxCpltCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_UART_RxCpltCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART5_IRQHandler
</UL>

<P><STRONG><a name="[3]"></a>HardFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, bsp_interrupt.o(i.HardFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32l40x.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>MemManage_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, bsp_interrupt.o(i.MemManage_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32l40x.o(RESET)
</UL>
<P><STRONG><a name="[2]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, bsp_interrupt.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32l40x.o(RESET)
</UL>
<P><STRONG><a name="[64]"></a>NVIC_Init</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, misc.o(i.NVIC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vBSP_Timer1Init
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vBSP_Port_FullSpeed
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
</UL>

<P><STRONG><a name="[7d]"></a>NVIC_PriorityGroupConfig</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, misc.o(i.NVIC_PriorityGroupConfig))
<BR><BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[75]"></a>RCC_ConfigHclk</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, n32l40x_rcc.o(i.RCC_ConfigHclk))
<BR><BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[77]"></a>RCC_ConfigPclk1</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, n32l40x_rcc.o(i.RCC_ConfigPclk1))
<BR><BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[76]"></a>RCC_ConfigPclk2</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, n32l40x_rcc.o(i.RCC_ConfigPclk2))
<BR><BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[79]"></a>RCC_ConfigPll</STRONG> (Thumb, 56 bytes, Stack size 12 bytes, n32l40x_rcc.o(i.RCC_ConfigPll))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = RCC_ConfigPll
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[7a]"></a>RCC_ConfigSysclk</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, n32l40x_rcc.o(i.RCC_ConfigSysclk))
<BR><BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[65]"></a>RCC_EnableAPB1PeriphClk</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, n32l40x_rcc.o(i.RCC_EnableAPB1PeriphClk))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vBSP_Timer1Init
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
</UL>

<P><STRONG><a name="[8a]"></a>RCC_EnableAPB1PeriphReset</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, n32l40x_rcc.o(i.RCC_EnableAPB1PeriphReset))
<BR><BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DeInit
</UL>

<P><STRONG><a name="[63]"></a>RCC_EnableAPB2PeriphClk</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, n32l40x_rcc.o(i.RCC_EnableAPB2PeriphClk))
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vBSP_Port_FullSpeed
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
</UL>

<P><STRONG><a name="[89]"></a>RCC_EnableAPB2PeriphReset</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, n32l40x_rcc.o(i.RCC_EnableAPB2PeriphReset))
<BR><BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DeInit
</UL>

<P><STRONG><a name="[73]"></a>RCC_EnableHsi</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, n32l40x_rcc.o(i.RCC_EnableHsi))
<BR><BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[78]"></a>RCC_EnablePll</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, n32l40x_rcc.o(i.RCC_EnablePll))
<BR><BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[8c]"></a>RCC_GetClocksFreqValue</STRONG> (Thumb, 302 bytes, Stack size 20 bytes, n32l40x_rcc.o(i.RCC_GetClocksFreqValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = RCC_GetClocksFreqValue
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
</UL>

<P><STRONG><a name="[69]"></a>RCC_GetFlagStatus</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, n32l40x_rcc.o(i.RCC_GetFlagStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RCC_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_WaitHsiStable
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[7b]"></a>RCC_GetSysclkSrc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, n32l40x_rcc.o(i.RCC_GetSysclkSrc))
<BR><BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[68]"></a>RCC_WaitHsiStable</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, n32l40x_rcc.o(i.RCC_WaitHsiStable))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RCC_WaitHsiStable &rArr; RCC_GetFlagStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[6b]"></a>RTC_ClrIntPendingBit</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, n32l40x_rtc.o(i.RTC_ClrIntPendingBit))
<BR><BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WKUP_IRQHandler
</UL>

<P><STRONG><a name="[6a]"></a>RTC_GetITStatus</STRONG> (Thumb, 80 bytes, Stack size 12 bytes, n32l40x_rtc.o(i.RTC_GetITStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = RTC_GetITStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WKUP_IRQHandler
</UL>

<P><STRONG><a name="[e]"></a>RTC_WKUP_IRQHandler</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, bsp_interrupt.o(i.RTC_WKUP_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = RTC_WKUP_IRQHandler &rArr; RTC_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClrITPendBit
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetITStatus
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ClrIntPendingBit
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTCEx_WakeUpTimerEventCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_n32l40x.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, bsp_interrupt.o(i.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32l40x.o(RESET)
</UL>
<P><STRONG><a name="[6d]"></a>SYSTICK_Callback</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, bsp_timer.o(i.SYSTICK_Callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SYSTICK_Callback
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vUartRevOtCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[a]"></a>SysTick_Handler</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, bsp_interrupt.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SysTick_Handler &rArr; SYSTICK_Callback
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTICK_Callback
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IncTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_n32l40x.o(RESET)
</UL>
<P><STRONG><a name="[72]"></a>SystemClock_Config</STRONG> (Thumb, 204 bytes, Stack size 24 bytes, main.o(i.SystemClock_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SystemClock_Config &rArr; RCC_WaitHsiStable &rArr; RCC_GetFlagStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_WaitHsiStable
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetSysclkSrc
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetFlagStatus
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_EnablePll
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_EnableHsi
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_ConfigSysclk
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_ConfigPll
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_ConfigPclk2
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_ConfigPclk1
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_ConfigHclk
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_PriorityGroupConfig
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_SetLatency
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_PrefetchBufSet
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[4e]"></a>SystemInit</STRONG> (Thumb, 190 bytes, Stack size 8 bytes, system_n32l40x.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = SystemInit &rArr; SetSysClock
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_n32l40x.o(.text)
</UL>
<P><STRONG><a name="[27]"></a>TIM2_IRQHandler</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, bsp_interrupt.o(i.TIM2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = TIM2_IRQHandler &rArr; HAL_TIM_PeriodElapsedCallback &rArr; vKeyCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetIntStatus
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClrIntPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_n32l40x.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>TIM3_IRQHandler</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, bsp_interrupt.o(i.TIM3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = TIM3_IRQHandler &rArr; HAL_TIM_PeriodElapsedCallback &rArr; vKeyCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetIntStatus
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClrIntPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_n32l40x.o(RESET)
</UL>
<P><STRONG><a name="[7f]"></a>TIM_ClrIntPendingBit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, n32l40x_tim.o(i.TIM_ClrIntPendingBit))
<BR><BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
</UL>

<P><STRONG><a name="[a6]"></a>TIM_ConfigInt</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, n32l40x_tim.o(i.TIM_ConfigInt))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vBSP_Timer1Init
</UL>

<P><STRONG><a name="[a5]"></a>TIM_ConfigPrescaler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, n32l40x_tim.o(i.TIM_ConfigPrescaler))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vBSP_Timer1Init
</UL>

<P><STRONG><a name="[a7]"></a>TIM_Enable</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, n32l40x_tim.o(i.TIM_Enable))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vBSP_Timer1Init
</UL>

<P><STRONG><a name="[7e]"></a>TIM_GetIntStatus</STRONG> (Thumb, 34 bytes, Stack size 12 bytes, n32l40x_tim.o(i.TIM_GetIntStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_GetIntStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
</UL>

<P><STRONG><a name="[a4]"></a>TIM_InitTimeBase</STRONG> (Thumb, 296 bytes, Stack size 0 bytes, n32l40x_tim.o(i.TIM_InitTimeBase))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vBSP_Timer1Init
</UL>

<P><STRONG><a name="[3b]"></a>UART5_IRQHandler</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, bsp_interrupt.o(i.UART5_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = UART5_IRQHandler &rArr; HAL_UART_RxCpltCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_TxCallback
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IdleCallback
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetIntStatus
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClrIntPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_n32l40x.o(RESET)
</UL>
<P><STRONG><a name="[82]"></a>UART_TxCallback</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, bsp_usart.o(i.UART_TxCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = UART_TxCallback &rArr; USART_ConfigInt
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ConfigInt
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART5_IRQHandler
</UL>

<P><STRONG><a name="[30]"></a>USART1_IRQHandler</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, bsp_interrupt.o(i.USART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USART1_IRQHandler &rArr; HAL_UART_RxCpltCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_TxCallback
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IdleCallback
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetIntStatus
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClrIntPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_n32l40x.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>USART2_IRQHandler</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, bsp_interrupt.o(i.USART2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USART2_IRQHandler &rArr; HAL_UART_RxCpltCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_TxCallback
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IdleCallback
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetIntStatus
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClrIntPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_n32l40x.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>USART3_IRQHandler</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, bsp_interrupt.o(i.USART3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USART3_IRQHandler &rArr; HAL_UART_RxCpltCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_TxCallback
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IdleCallback
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetIntStatus
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClrIntPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_n32l40x.o(RESET)
</UL>
<P><STRONG><a name="[81]"></a>USART_ClrIntPendingBit</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, n32l40x_usart.o(i.USART_ClrIntPendingBit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART_ClrIntPendingBit
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART5_IRQHandler
</UL>

<P><STRONG><a name="[87]"></a>USART_ConfigInt</STRONG> (Thumb, 74 bytes, Stack size 20 bytes, n32l40x_usart.o(i.USART_ConfigInt))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = USART_ConfigInt
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vBSP_USARTInit
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_TxCallback
</UL>

<P><STRONG><a name="[88]"></a>USART_DeInit</STRONG> (Thumb, 134 bytes, Stack size 8 bytes, n32l40x_usart.o(i.USART_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_EnableAPB1PeriphReset
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_EnableAPB2PeriphReset
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vBSP_USARTDeInit
</UL>

<P><STRONG><a name="[aa]"></a>USART_Enable</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, n32l40x_usart.o(i.USART_Enable))
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vBSP_USARTInit
</UL>

<P><STRONG><a name="[83]"></a>USART_GetFlagStatus</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, n32l40x_usart.o(i.USART_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ucBSP_UartSendDataPoll
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART5_IRQHandler
</UL>

<P><STRONG><a name="[80]"></a>USART_GetIntStatus</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, n32l40x_usart.o(i.USART_GetIntStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USART_GetIntStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART5_IRQHandler
</UL>

<P><STRONG><a name="[8b]"></a>USART_Init</STRONG> (Thumb, 168 bytes, Stack size 56 bytes, n32l40x_usart.o(i.USART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = USART_Init &rArr; RCC_GetClocksFreqValue
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreqValue
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vBSP_USARTInit
</UL>

<P><STRONG><a name="[67]"></a>USART_ReceiveData</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, n32l40x_usart.o(i.USART_ReceiveData))
<BR><BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART5_IRQHandler
</UL>

<P><STRONG><a name="[86]"></a>USART_SendData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, n32l40x_usart.o(i.USART_SendData))
<BR><BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ucBSP_UartSendDataPoll
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_TxCallback
</UL>

<P><STRONG><a name="[a9]"></a>USART_StructInit</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, n32l40x_usart.o(i.USART_StructInit))
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vBSP_USARTInit
</UL>

<P><STRONG><a name="[6]"></a>UsageFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, bsp_interrupt.o(i.UsageFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32l40x.o(RESET)
</UL>
<P><STRONG><a name="[8d]"></a>__0printf$8</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, printf8.o(i.__0printf$8), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[b8]"></a>__1printf$8</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf8.o(i.__0printf$8), UNUSED)

<P><STRONG><a name="[95]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf8.o(i.__0printf$8))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b9]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[ba]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[bb]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[50]"></a>fputc</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, bsp_usart.o(i.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = fputc &rArr; ucBSP_UartSendDataPoll
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ucBSP_UartSendDataPoll
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printf8.o(i.__0printf$8)
</UL>
<P><STRONG><a name="[4d]"></a>main</STRONG> (Thumb, 126 bytes, Stack size 0 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = main &rArr; vBSP_USARTInit &rArr; USART_Init &rArr; RCC_GetClocksFreqValue
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vSoftInit
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPowerOnEventCheck
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vBSP_USARTInit
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vBSP_Timer1Init
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vBSP_Port_FullSpeed
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[91]"></a>ucBSP_UartSendDataPoll</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, bsp_usart.o(i.ucBSP_UartSendDataPoll))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ucBSP_UartSendDataPoll
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vBSP_WDG_Refresh
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[99]"></a>usGetMCUADCVolt</STRONG> (Thumb, 158 bytes, Stack size 40 bytes, bsp_adc.o(i.usGetMCUADCVolt))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = usGetMCUADCVolt &rArr; ADC_ConfigRegularChannel
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetDat
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_EnableSoftwareStartConv
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ConfigRegularChannel
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ClearFlag
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vBsp_ADC_PollForConversion
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vSoftInit
</UL>

<P><STRONG><a name="[9f]"></a>vBSP_DelayMs</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, bsp_timer.o(i.vBSP_DelayMs))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = vBSP_DelayMs &rArr; vSysTickDelay
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vBSP_WDG_Refresh
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vSysTickDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPowerOnEventCheck
</UL>

<P><STRONG><a name="[5e]"></a>vBSP_GpioDeinit</STRONG> (Thumb, 256 bytes, Stack size 20 bytes, bsp_io.o(i.vBSP_GpioDeinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = vBSP_GpioDeinit
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspDeInit
</UL>

<P><STRONG><a name="[92]"></a>vBSP_Port_FullSpeed</STRONG> (Thumb, 410 bytes, Stack size 32 bytes, bsp_io.o(i.vBSP_Port_FullSpeed))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = vBSP_Port_FullSpeed &rArr; GPIO_InitPeripheral
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_InitStruct
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_InitPeripheral
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClrITPendBit
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteBit
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_EnableAPB2PeriphClk
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_InitPeripheral
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ConfigEXTILine
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[93]"></a>vBSP_Timer1Init</STRONG> (Thumb, 126 bytes, Stack size 32 bytes, bsp_timer.o(i.vBSP_Timer1Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = vBSP_Timer1Init &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_EnableAPB1PeriphClk
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_InitTimeBase
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Enable
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ConfigPrescaler
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ConfigInt
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a8]"></a>vBSP_USARTDeInit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, bsp_usart.o(i.vBSP_USARTDeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = vBSP_USARTDeInit &rArr; HAL_UART_MspDeInit &rArr; GPIO_InitPeripheral
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DeInit
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspDeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vBSP_USARTInit
</UL>

<P><STRONG><a name="[94]"></a>vBSP_USARTInit</STRONG> (Thumb, 666 bytes, Stack size 24 bytes, bsp_usart.o(i.vBSP_USARTInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = vBSP_USARTInit &rArr; USART_Init &rArr; RCC_GetClocksFreqValue
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vBSP_USARTDeInit
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_StructInit
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Enable
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ConfigInt
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[98]"></a>vBSP_WDG_Refresh</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, bsp_wdg.o(i.vBSP_WDG_Refresh))
<BR><BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ucBSP_UartSendDataPoll
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vBSP_DelayMs
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vBsp_ADC_PollForConversion
</UL>

<P><STRONG><a name="[9c]"></a>vBsp_ADC_PollForConversion</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, bsp_adc.o(i.vBsp_ADC_PollForConversion))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = vBsp_ADC_PollForConversion
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vBSP_WDG_Refresh
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetFlagStatus
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usGetMCUADCVolt
</UL>

<P><STRONG><a name="[5c]"></a>vComLostOtCallback</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, app_user.o(i.vComLostOtCallback))
<BR><BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
</UL>

<P><STRONG><a name="[5b]"></a>vKeyCheck</STRONG> (Thumb, 270 bytes, Stack size 16 bytes, app_io.o(i.vKeyCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = vKeyCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
</UL>

<P><STRONG><a name="[97]"></a>vPowerOnEventCheck</STRONG> (Thumb, 148 bytes, Stack size 8 bytes, app_system.o(i.vPowerOnEventCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = vPowerOnEventCheck &rArr; vBSP_DelayMs &rArr; vSysTickDelay
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vSetSysState
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vBSP_DelayMs
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ae]"></a>vSetSysState</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, app_system.o(i.vSetSysState))
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPowerOnEventCheck
</UL>

<P><STRONG><a name="[96]"></a>vSoftInit</STRONG> (Thumb, 174 bytes, Stack size 8 bytes, app_system.o(i.vSoftInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = vSoftInit &rArr; usGetMCUADCVolt &rArr; ADC_ConfigRegularChannel
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usGetMCUADCVolt
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a0]"></a>vSysTickDelay</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, bsp_timer.o(i.vSysTickDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vSysTickDelay
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vBSP_DelayMs
</UL>

<P><STRONG><a name="[6e]"></a>vUartRevOtCallback</STRONG> (Thumb, 78 bytes, Stack size 0 bytes, bsp_usart.o(i.vUartRevOtCallback))
<BR><BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTICK_Callback
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[5f]"></a>__NVIC_DisableIRQ</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, bsp_usart.o(i.__NVIC_DisableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspDeInit
</UL>

<P><STRONG><a name="[6f]"></a>SetSysClock</STRONG> (Thumb, 140 bytes, Stack size 20 bytes, system_n32l40x.o(i.SetSysClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SetSysClock
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigMRVoltage1V
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[8e]"></a>_printf_core</STRONG> (Thumb, 996 bytes, Stack size 104 bytes, printf8.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf$8
</UL>

<P><STRONG><a name="[90]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printf8.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[8f]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printf8.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
